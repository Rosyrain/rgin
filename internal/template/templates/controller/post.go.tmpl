package controller

import (
	"errors"
	"github.com/go-playground/validator/v10"
	"{{ .Name }}/logic"
	models "{{ .Name }}/models"
	"go.uber.org/zap"
	"github.com/gin-gonic/gin"
)

// TODO: 如需集成JWT鉴权，请在路由层为相关接口添加中间件

// CreatePostHandler 创建帖子
func CreatePostHandler(c *gin.Context) {
	// 1. 获取参数和参数校验
	p := new(models.ParamPostCreate)
	if err := c.ShouldBindJSON(p); err != nil {
		zap.L().Error("CreatePost with invalid param", zap.Error(err))
		errs, ok := err.(validator.ValidationErrors)
		if !ok {
			ResponseError(c, CodeInvalidParam)
			return
		}
		ResponseErrorWithMsg(c, CodeInvalidParam, removeTopStruct(errs.Translate(trans)))
		return
	}
	// 1.1 获取当前用户信息（如已集成JWT中间件）
	userID, userName, err := GetCurrentUser(c)
	if err != nil {
		ResponseError(c, CodeNeedLogin)
		return
	}

	// 2. 业务处理
	// TODO: 可将 userID/userName 赋值给 p.AuthorID/p.AuthorName
	if err := logic.CreatePost(p); err != nil {
		zap.L().Error("logic.CreatePost failed", zap.Error(err))
		ResponseError(c, CodeServerBusy)
		return
	}

	// 3. 返回响应
	ResponseSuccess(c, nil)
}

// BatchCreatePostsHandler 批量创建帖子（需要鉴权）
func BatchCreatePostsHandler(c *gin.Context) {
	// 1. 获取参数和参数校验
	var posts []*models.Post
	if err := c.ShouldBindJSON(&posts); err != nil {
		zap.L().Error("BatchCreatePosts with invalid param", zap.Error(err))
		ResponseError(c, CodeInvalidParam)
		return
	}
	// 1.1 获取当前用户信息
	_, _, err := GetCurrentUser(c)
	if err != nil {
		ResponseError(c, CodeNeedLogin)
		return
	}

	// 2. 业务处理
	if err := logic.BatchCreatePosts(posts); err != nil {
		zap.L().Error("logic.BatchCreatePosts failed", zap.Error(err))
		ResponseError(c, CodeServerBusy)
		return
	}

	// 3. 返回响应
	ResponseSuccess(c, nil)
}

// UpdatePostHandler 更新帖子（需要鉴权）
func UpdatePostHandler(c *gin.Context) {
	// 1. 获取参数和参数校验
	p := new(models.ParamPostUpdate)
	if err := c.ShouldBindJSON(p); err != nil {
		zap.L().Error("UpdatePost with invalid param", zap.Error(err))
		ResponseError(c, CodeInvalidParam)
		return
	}
	// 1.1 获取当前用户信息
	userID, _, err := GetCurrentUser(c)
	if err != nil {
		ResponseError(c, CodeNeedLogin)
		return
	}

	// 2. 业务处理
	if err := logic.UpdatePost(p, userID); err != nil {
		if errors.Is(err, logic.ErrNoPermission) {
			ResponseError(c, CodeNoPermission)
			return
		}
		zap.L().Error("logic.UpdatePost failed", zap.Error(err))
		ResponseError(c, CodeServerBusy)
		return
	}

	// 3. 返回响应
	ResponseSuccess(c, nil)
}

// DeletePostHandler 删除帖子（需要鉴权）
func DeletePostHandler(c *gin.Context) {
	// 1. 获取参数和参数校验
	postID := c.Param("post_id") // 假设路由为 /post/:post_id
	// TODO: 参数转换与校验
	// 1.1 获取当前用户信息
	userID, _, err := GetCurrentUser(c)
	if err != nil {
		ResponseError(c, CodeNeedLogin)
		return
	}

	// 2. 业务处理
	if err := logic.DeletePost(0, userID); err != nil { // 需将 postID 转为 int64
		if errors.Is(err, logic.ErrNoPermission) {
			ResponseError(c, CodeNoPermission)
			return
		}
		zap.L().Error("logic.DeletePost failed", zap.Error(err))
		ResponseError(c, CodeServerBusy)
		return
	}

	// 3. 返回响应
	ResponseSuccess(c, nil)
}

// GetPostByIDHandler 获取单个帖子（无需鉴权）
func GetPostByIDHandler(c *gin.Context) {
	// 1. 获取参数和参数校验
	postID := c.Param("post_id") // 假设路由为 /post/:post_id
	// TODO: 参数转换与校验

	// 2. 业务处理
	post, err := logic.GetPostByID(0) // 需将 postID 转为 int64
	if err != nil {
		zap.L().Error("logic.GetPostByID failed", zap.Error(err))
		if errors.Is(err, ErrNoRows) {
			ResponseError(c, CodeNotFound)
			return
		}
		ResponseError(c, CodeServerBusy)
		return
	}

	// 3. 返回响应
	ResponseSuccess(c, post)
}

// ListPostsByRangeHandler 分页获取帖子列表（无需鉴权）
func ListPostsByRangeHandler(c *gin.Context) {
	// 1. 获取参数和参数校验
	p := new(models.ParamPage)
	if err := c.ShouldBindQuery(p); err != nil {
		zap.L().Error("ListPostsByRange with invalid param", zap.Error(err))
		ResponseError(c, CodeInvalidParam)
		return
	}

	// 2. 业务处理
	posts, err := logic.ListPostsByRange(int(p.Offset), int(p.Limit))
	if err != nil {
		zap.L().Error("logic.ListPostsByRange failed", zap.Error(err))
		ResponseError(c, CodeServerBusy)
		return
	}

	// 3. 返回响应
	ResponseSuccess(c, posts)
}

// TODO: 可根据需要扩展更多接口，如批量创建、点赞、评论等 