package controller

import (
	"errors"
	"github.com/go-playground/validator/v10"
	"{{ .Name }}/logic"
	models "{{ .Name }}/models"

	"go.uber.org/zap"
	"github.com/gin-gonic/gin"
)

// TODO: 如需集成限流、CORS、鉴权等中间件，请在路由层按需启用

// SignUpHandler 用户注册接口
func SignUpHandler(c *gin.Context) {
	// 1. 获取参数和参数校验
	p := new(models.ParamSignUp)
	if err := c.ShouldBindJSON(p); err != nil {
		zap.L().Error("SignUp with invalid param", zap.Error(err))
		errs, ok := err.(validator.ValidationErrors)
		if !ok {
			ResponseError(c, CodeInvalidParam)
			return
		}
		ResponseErrorWithMsg(c, CodeInvalidParam, removeTopStruct(errs.Translate(trans)))
		return
	}
	// zap.L().Debug("SignUp param", zap.Any("param", p))

	// 2. 业务处理
	if err := logic.SignUp(p); err != nil {
		zap.L().Error("logic.SignUp(p) failed", zap.Error(err))
		if errors.Is(err, logic.ErrUserExist) { // TODO: 定义 ErrUserExist
			ResponseError(c, CodeUserExist)
			return
		}
		ResponseError(c, CodeServerBusy)
		return
	}

	// 3. 返回响应
	ResponseSuccess(c, nil)
}

// UserInfoHandler 获取用户信息接口
func UserInfoHandler(c *gin.Context) {
	username := c.Param("username")
	user, err := logic.GetUserInfo(username)
	if err != nil {
		zap.L().Error("logic.GetUserInfo(username)", zap.String("username", username), zap.Error(err))
		if errors.Is(err, logic.ErrUserNotExist) { // TODO: 定义 ErrUserNotExist
			ResponseError(c, CodeUserNotExist)
			return
		}
		ResponseError(c, CodeServerBusy)
		return
	}
	ResponseSuccess(c, gin.H{
		"user_id":   user.UserID,
		"user_name": user.Username,
		// TODO: 如需集成JWT，返回token
	})
}

// LoginHandler 用户登录接口
func LoginHandler(c *gin.Context) {
	// 1. 获取参数和参数校验
	p := new(models.ParamLogin)
	if err := c.ShouldBindJSON(p); err != nil {
		zap.L().Error("Login with invalid param", zap.Error(err))
		errs, ok := err.(validator.ValidationErrors)
		if !ok {
			ResponseError(c, CodeInvalidParam)
			return
		}
		ResponseErrorWithMsg(c, CodeInvalidParam, removeTopStruct(errs.Translate(trans)))
		return
	}

	// 2. 业务处理
	if err := logic.Login(p); err != nil {
		zap.L().Error("logic.Login failed", zap.Error(err))
		if errors.Is(err, logic.ErrUserNotExist) {
			ResponseError(c, CodeUserNotExist)
			return
		}
		ResponseError(c, CodeInvalidPassword)
		return
	}

	// 3. 返回响应
	ResponseSuccess(c, nil)
}

// TODO: 可根据需要扩展更多接口，如登录、更新用户等