package controller

import (
	"errors"
	"fmt"
	"github.com/go-playground/validator/v10"
	"{{ .Name }}/dao/mysql"
	"{{ .Name }}/dao/redis"
	"{{ .Name }}/logic"
	models "{{ .Name }}/models"

	"go.uber.org/zap"

	"github.com/gin-gonic/gin"
)

// 示例句柄函数

func SignUpHandler(c *gin.Context) {
	//1.获取参数和参数校验
	p := new(models.ParamSignUp)

	if err := c.ShouldBindJSON(p); err != nil {
		//请求参数有误，直接返回响应
		zap.L().Error("SignUp with invalid param", zap.Error(err))
		//判断err是不是validator.ValidationErrors类型
		errs, ok := err.(validator.ValidationErrors)
		if !ok {
			ResponseError(c, CodeInvalidParam)
			return
		}

		//c.JSON(http.StatusOK, gin.H{
		//	"msg": removeTopStruct(errs.Translate(trans)), //翻译错误
		//})
		ResponseErrorWithMsg(c, CodeInvalidParam, removeTopStruct(errs.Translate(trans)))

		return
	}

	fmt.Println(p)

	//2.业务处理
	if err := logic.SignUp(p); err != nil {
		//方便查看是什么位置出错
		//fmt.Println(err)
		zap.L().Error("logic.SignUp(p) failed", zap.Error(err))

		if errors.Is(err, mysql.ErrorUserExist) {
			ResponseError(c, CodeUserExist)
			return
		}

		if errors.Is(err, redis.ErrCaptchaTimeExpire) {
			ResponseError(c, CodeCaptchaExpire)
			return
		}

		if errors.Is(err, redis.ErrCaptcha) {
			ResponseError(c, CodeNotCaptcha)
			return
		}

		ResponseError(c, CodeServerBusy)
		return
	}

	//3.返回响应
	ResponseSuccess(c, nil)
}


func LoginHandler(c *gin.Context) {
	//1.获取请求参数以及参数校验
	p := new(models.ParamLogin)

	if err := c.ShouldBindJSON(&p); err != nil {
		//请求参数有误，直接返回响应
		zap.L().Error("Login with invalid param", zap.Error(err))
		//判断err是不是validator.ValidationErrors类型
		errs, ok := err.(validator.ValidationErrors)
		if !ok {
			ResponseError(c, CodeInvalidParam)
			return
		}
		ResponseErrorWithMsg(c, CodeInvalidParam, removeTopStruct(errs.Translate(trans)))

		return
	}
	fmt.Println(p)

	//2.业务处理
	_, err := logic.Login(p)
	if err != nil {
		zap.L().Error("logic.Login failed", zap.String("username", p.Username), zap.Error(err))
		if errors.Is(err, mysql.ErrorUserNotExist) {
			ResponseError(c, CodeUserNotExist)
		}
		ResponseError(c, CodeInvalidPassword)
		return
	}

	//3.返回响应
	ResponseSuccess(c, nil)
}

func UserInfoHandler(c *gin.Context) {
	//1.参数校验
	username := c.Param("username")

	//2.业务处理
	_, err := logic.GetUseInfo(username)
	if err != nil {
		zap.L().Error("logic.GetUseInfo(username)", zap.String("username", username), zap.Error(err))
		if errors.Is(err, mysql.ErrorUserNotExist) {
			ResponseError(c, CodeUserNotExist)
			return
		}
		ResponseError(c, CodeServerBusy)
		return
	}

	//3.返回响应
	ResponseSuccess(c, nil)
}