package logic

import (
	"errors"
	"{{.ModuleName}}/dao/sqlite"
	"{{.ModuleName}}/models"
)

var ErrNoPermission = errors.New("no permission to operate this post")

// SignUp 用户注册逻辑
func SignUp(p *models.ParamSignUp) error {
	// 1. 检查用户名是否已存在
	existing, err := sqlite.GetUserByUsername(p.Username)
	if err != nil && !errors.Is(err, sqlite.ErrNoRows) {
		return err
	}
	if existing != nil {
		return ErrUserExist // TODO: 定义 ErrUserExist 错误
	}
	// 2. 插入新用户（此处可做密码加密等处理）
	user := &models.User{
		Username: p.Username,
		Password: p.Password,
	}
	return sqlite.InsertUser(user)
}

// Login 用户登录逻辑
func Login(p *models.ParamLogin) error {
	user, err := sqlite.GetUserByUsername(p.Username)
	if err != nil {
		return err
	}
	if user.Password != p.Password {
		return ErrInvalidPassword // TODO: 定义 ErrInvalidPassword
	}
	return nil
}

// GetUserInfo 获取用户信息
func GetUserInfo(username string) (*models.User, error) {
	return sqlite.GetUserByUsername(username)
}

// TODO: 可根据需要扩展更多业务逻辑，如用户信息更新等

