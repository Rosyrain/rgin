package router

import (
	"net/http"
	"{{ .Name }}/controller"
	//_ "{{ .Name }}/docs" // 千万不要忘了导入把你上一步生成的docs
	"{{ .Name }}/logger"
	"{{ .Name }}/middlewares"

	"github.com/gin-gonic/gin"

	"github.com/gin-contrib/pprof"
)

func SetupRouter(mode string) *gin.Engine {
	if mode == gin.ReleaseMode {
		gin.SetMode(gin.ReleaseMode)
	}
	r := gin.New()
	// 注册全局中间件
	// 如需启用限流、CORS、鉴权等功能，请取消下方注释并根据需要调整参数
	// r.Use(middlewares.RateLimitMiddleware(2*time.Second, 1)) // 令牌桶限流
	r.Use(logger.GinLogger(), logger.GinRecovery(true))
	r.Use(middlewares.CORS()) // 跨域支持，如不需要可注释
	// TODO: 如需集成JWT鉴权，请在需要的路由组添加 middlewares.JWTAuthMiddleware()

	//r.LoadHTMLFiles("templates/index.html")
	//r.Static("/static", "./static")
	//r.GET("/", func(c *gin.Context) {
	//	c.HTML(http.StatusOK, "index.html", nil)
	//})

	//注册业务路由
	v1 := r.Group("/api/v1")
	{
		// 用户相关
		v1.POST("/signup", controller.SignUpHandler)
		v1.POST("/login", controller.LoginHandler)
		v1.GET("/user/:username", controller.UserInfoHandler)

		// 无需鉴权的帖子相关路由
		v1.GET("/post/:post_id", controller.GetPostByIDHandler)        // 获取单个帖子
		v1.GET("/posts", controller.ListPostsByRangeHandler)           // 分页获取帖子列表
	}

	// 需要鉴权的帖子相关路由（必须登录）
	v1Auth := r.Group("/api/v1")
	v1Auth.Use(middlewares.JWTAuthMiddleware())
	{
		v1Auth.POST("/post", controller.CreatePostHandler)                // 创建帖子
		v1Auth.POST("/posts/batch", controller.BatchCreatePostsHandler)    // 批量创建帖子
		v1Auth.PUT("/post", controller.UpdatePostHandler)                  // 更新帖子
		v1Auth.DELETE("/post/:post_id", controller.DeletePostHandler)      // 删除帖子
	}

	pprof.Register(r) //注册pprof相关路由

	r.NoRoute(func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{
			"msg": "404",
		})
	})

	return r
}
