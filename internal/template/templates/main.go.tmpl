package main

// @title {{ .Name }}
// @version 0.0.1
// @description 关于{{ .Name }}相关的接口文档
// @termsOfService http://swagger.io/terms/

// @contact.name RosyRain
// @contact.url http://www.swagger.io/support
// @contact.email jx178861659@163.com

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host 127.0.0.1:8888
// @BasePath /api/v1

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"{{ .Name }}/controller"
	sqlite "{{ .Name }}/dao/sqlite"  // 默认使用 SQLite
	// mysql "{{ .Name }}/dao/mysql"  // MySQL 支持（默认关闭）
	// redis "{{ .Name }}/dao/redis"  // Redis 支持（默认关闭）
	logger "{{ .Name }}/logger"
	snowflake "{{ .Name }}/pkg/snowflask"
	routes "{{ .Name }}/router"
	settings "{{ .Name }}/settings"
	"os"
	"os/signal"
	"syscall"
	"time"

	"go.uber.org/zap"
)

// Go Web开发较通用的脚手架模板

func main() {
	//取消命令行读取配置文件路径，在settings里直接指定
	//if len(os.Args) < 2 {
	//	fmt.Println("need config file.eg: woanju config.yaml")
	//	return
	//}

	// 1. 加载配置
	// setting.Init(os.Args[1]) 通过命令行参数加载配置文件,需要修改settings相关内容
	if err := settings.Init(); err != nil {
		fmt.Printf("init settings failed, err:%v\n", err)
		return
	}
	fmt.Println(settings.Conf)
	fmt.Println(settings.Conf.LogConfig == nil)

	// 2. 初始化日志
	if err := logger.Init(settings.Conf.LogConfig, settings.Conf.Mode); err != nil {
		fmt.Printf("init logger failed, err:%v\n", err)
		return
	}
	defer zap.L().Sync()
	zap.L().Debug("logger init success...")

	// 3. 初始化 SQLite 数据库（仅连接，不自动建表）
	if err := sqlite.InitDB("./data/app.db"); err != nil {
		fmt.Printf("init sqlite failed, err:%v\n", err)
		return
	}
	defer sqlite.Close()
	// 提示：如为首次运行，请手动执行 models/create_table.sql 初始化表结构！
	// 例如：sqlite3 ./data/app.db < models/create_table.sql

	// 3. 初始化 MySQL 数据库
	// MySQL 支持（默认关闭）
	/*
	if err := mysql.Init(settings.Conf.MySQLConfig); err != nil {
		fmt.Printf("init mysql failed, err:%v\n", err)
		return
	}
	defer mysql.Close()
	*/

	// 4. 初始化Redis连接
	// Redis 支持（默认关闭）
	/*
	if err := redis.Init(settings.Conf.RedisConfig); err != nil {
		fmt.Printf("init redis failed, err:%v\n", err)
		return
	}
	defer redis.Close()
	*/

	// 加载雪花算法配置
	if err := snowflake.Init(settings.Conf.StartTime, settings.Conf.MachineID); err != nil {
		fmt.Printf("init snowflask failed,err:%#v\n", err)
	}

	// 初始化gin框架内置的校验器使用的翻译器
	if err := controller.InitTrans("zh"); err != nil {
		fmt.Printf("init validator trans failed,err:%#v\n", err)
	}

	// 5. 注册路由
	r := routes.SetupRouter(settings.Conf.Mode)

	// 6. 启动服务（优雅关机）
	fmt.Println(settings.Conf.Port)
	srv := &http.Server{
		Addr:    fmt.Sprintf(":%d", settings.Conf.Port),
		Handler: r,
	}

	go func() {
		// 开启一个goroutine启动服务
		if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatalf("listen: %s\n", err)
		}
	}()

	// 等待中断信号来优雅地关闭服务器，为关闭服务器操作设置一个5秒的超时
	quit := make(chan os.Signal, 1) // 创建一个接收信号的通道
	// kill 默认会发送 syscall.SIGTERM 信号
	// kill -2 发送 syscall.SIGINT 信号，我们常用的Ctrl+C就是触发系统SIGINT信号
	// kill -9 发送 syscall.SIGKILL 信号，但是不能被捕获，所以不需要添加它
	// signal.Notify把收到的 syscall.SIGINT或syscall.SIGTERM 信号转发给quit
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM) // 此处不会阻塞
	<-quit                                               // 阻塞在此，当接收到上述两种信号时才会往下执行
	zap.L().Info("Shutdown Server ...")
	// 创建一个5秒超时的context
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	// 5秒内优雅关闭服务（将未处理完的请求处理完再关闭服务），超过5秒就超时退出
	if err := srv.Shutdown(ctx); err != nil {
		zap.L().Fatal("Server Shutdown", zap.Error(err))
	}

	zap.L().Info("Server exiting")
}
